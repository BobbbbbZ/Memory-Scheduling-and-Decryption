module ksa (
				input CLOCK_50,
				input [3:0] KEY, 
				input [9:0] SW, 
				output [9:0] LEDR,
				output [6:0] HEX0, 
				output [6:0] HEX1, 
				output [6:0] HEX2, 
				output [6:0] HEX3, 
				output [6:0] HEX4, 
				output [6:0] HEX5
				); 

logic [4:0] state;
logic [2:0] counter;
parameter idle = 5'b00000;
parameter task1_go = 5'b00001;
parameter task2a_go = 5'b00010;
parameter task2b_go = 5'b00100;
parameter finish = 5'b01000;

assign task1_start = state[0];
assign task2a_start = state[1];
assign task2b_start = state[2];

//Inputs to s_mem 
logic [7:0] mem_address, mem_data, mem_out; 
logic write_enable;
logic [7:0] rom_addr, rom_q, ram_addr, ram_q;
logic wren_ram;

//Task 1 
logic wren_1, task1_done, task1_start; 
logic [7:0] mem_address_1, mem_data_1; 

//Task 2a 
logic [23:0] secret_key;
logic task2a_start, task2a_done, wren_2a;  
logic [7:0] mem_address_2a, mem_data_2a;
assign secret_key = 23'h000249; 

//Task 2b
logic task2b_start, task2b_done, wren_2b, wren_decrypt_2b;
logic [7:0] mem_address_2b, mem_data_2b, mem_address_decrypt_2b, mem_data_decrypt_2b;
 

SevenSegmentDisplayDecoder SevenSegmentDisplayDecoder_inst0(.ssOut(HEX0), .nIn(secret_key[3:0]));
SevenSegmentDisplayDecoder SevenSegmentDisplayDecoder_inst1(.ssOut(HEX1), .nIn(secret_key[7:4]));
SevenSegmentDisplayDecoder SevenSegmentDisplayDecoder_inst2(.ssOut(HEX2), .nIn(secret_key[11:8]));
SevenSegmentDisplayDecoder SevenSegmentDisplayDecoder_inst3(.ssOut(HEX3), .nIn(secret_key[15:12]));
SevenSegmentDisplayDecoder SevenSegmentDisplayDecoder_inst4(.ssOut(HEX4), .nIn(secret_key[19:16]));
SevenSegmentDisplayDecoder SevenSegmentDisplayDecoder_inst5(.ssOut(HEX5), .nIn(secret_key[23:20]));

assign LEDR[0] = task1_done;
assign LEDR[1] = task2a_done;
assign LEDR[2] = task2b_done;
s_memory memory(
				.address(mem_address),
				.clock(CLOCK_50),
				.data(mem_data), 
				.wren(write_enable),
				.q(mem_out) 
				); 

rom message (
			.address(rom_addr),
			.clock(CLOCK_50),
			.q(rom_q)
);

decrypt_ram ram (
				.address(mem_address_decrypt_2b),
				.clock(CLOCK_50),
				.data(mem_data_decrypt_2b),
				.wren(wren_decrypt_2b),
				.q(ram_q)
				);



task1 dut(
			 .clk(CLOCK_50),
			 .mem_address(mem_address_1),
			 .mem_data(mem_data_1),
			 .sig_start(task1_start), 
			 .wren(wren_1), 
			 .t_done(task1_done)
			); 
					
task2a dutt(
			.clk(CLOCK_50), 
			.sig_start(task2a_start), 
			.t_done(task2a_done), 
			.key(secret_key),
			.data_in(mem_out), 
			.t_write(wren_2a),
			.mem_data(mem_data_2a), 
			.mem_address(mem_address_2a)
		  );

//task2b duttt(
//			.clk(CLOCK_50),
//			.sig_start(task2b_start),
//			.t_done(task2b_done),
//			.rom_addr(rom_addr),
//			.rom_data(rom_data),
//			.wren_ram(wren_ram),
//			.ram_addr(ram_addr),
//			.ram_data(mem_out),
//			.ram_q(ram_data),
//			.decrypt_mem_data(mem_data_2b),
//			.decrypt_mem_address(mem_address_2b),
//			.wren_2b(wren_2b)
//			);

simple_decrypt decrypt (
						.start(task2b_start), 
						.finish(task2b_done), 
						.clk(CLOCK_50),  
						.rom_addr(rom_addr), 
						.rom_data(rom_q), 
						.write_ram(wren_ram), 
						.ram_addr(mem_address_2b), 
						.ram_data(mem_out), 
						.ram_data_out(mem_data_2b), 
						.decrypted_data(mem_data_decrypt_2b),
						.write_decrypted(wren_decrypt_2b), 
						.decrypt_addr(mem_address_decrypt_2b)
						);




always_ff @(posedge CLOCK_50) begin 
	case(state) 
	
	idle: if(!KEY[0]) state <= task1_go;
	
	task1_go: if(task1_done) state <= task2a_go;   
	
	task2a_go: if(task2a_done) state <= task2b_go; 

	task2b_go: if (task2b_done) state <= finish;
	
	finish: state <= finish;
	
	default: state <= idle; 
	
	endcase 
end 

always_ff @(posedge CLOCK_50) begin
	case (state) 
		task1_go: begin
			counter <= 0;
			mem_address <= mem_address_1;
			mem_data <= mem_data_1;
			write_enable <= wren_1;
		end

		task2a_go: begin
			mem_address <= mem_address_2a;
			mem_data <= mem_data_2a;
			write_enable <= wren_2a;
		end

		task2b_go: begin
			mem_address <= mem_address_2b;
			mem_data <= mem_data_2b;
			write_enable <= wren_ram;
		end

		default: begin
			mem_address <= mem_address; 
			mem_data <= mem_data; 
			write_enable <= write_enable; 
			end 
		
	endcase
end


endmodule 
